// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wdjrQSNRX7ys49KwqunuZ4
// Component: 2vtbzB0tVFMs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 7oMbG7rPxeuI/component
import Footer from "../../Footer"; // plasmic-import: t96iChT22ax_/component
import { useScreenVariants as useScreenVariantshbagvQWqcZ69 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HbagvQWqcZ69/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_website_starter.module.css"; // plasmic-import: wdjrQSNRX7ys49KwqunuZ4/projectcss
import sty from "./PlasmicContactUs.module.css"; // plasmic-import: 2vtbzB0tVFMs/css
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: r34WdRvBJ2B1/icon
import bigContactUsKeyboardButtonContactInscriptionsKeyboardButtonGreenButtonjpgBbKJb1V9ItRa from "../vouchers/images/bigContactUsKeyboardButtonContactInscriptionsKeyboardButtonGreenButtonjpg.jpg"; // plasmic-import: bbKJb1V9ItRA/picture

createPlasmicElementProxy;

export const PlasmicContactUs__VariantProps = new Array();

export const PlasmicContactUs__ArgProps = new Array();

function PlasmicContactUs__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshbagvQWqcZ69()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__grwIj)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ksPrv)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__u2Pis)}>
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: bigContactUsKeyboardButtonContactInscriptionsKeyboardButtonGreenButtonjpgBbKJb1V9ItRa,
                      fullWidth: 3860,
                      fullHeight: 2574,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column___5MlJv)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oZ1Qy)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Contact Us"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rBk09
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h4
                            data-plasmic-name={"h4"}
                            data-plasmic-override={overrides.h4}
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4
                            )}
                          >
                            {"Have Questions? Get In Touch!"}
                          </h4>
                        }

                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c7HWv)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Rg62
                        )}
                      >
                        <input
                          data-plasmic-name={"textbox"}
                          data-plasmic-override={overrides.textbox}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.textbox
                          )}
                          onChange={e => {
                            p.generateStateOnChangeProp($state, [
                              "textbox",
                              "value"
                            ])(e.target.value);
                          }}
                          placeholder={"First Name"}
                          ref={ref => {
                            $refs["textbox"] = ref;
                          }}
                          size={1}
                          type={"text"}
                          value={
                            p.generateStateValueProp($state, [
                              "textbox",
                              "value"
                            ]) ?? ""
                          }
                        />

                        <input
                          data-plasmic-name={"textbox2"}
                          data-plasmic-override={overrides.textbox2}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.textbox2
                          )}
                          onChange={e => {
                            p.generateStateOnChangeProp($state, [
                              "textbox2",
                              "value"
                            ])(e.target.value);
                          }}
                          placeholder={"Last Name"}
                          ref={ref => {
                            $refs["textbox2"] = ref;
                          }}
                          size={1}
                          type={"text"}
                          value={
                            p.generateStateValueProp($state, [
                              "textbox2",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </p.Stack>
                      <input
                        data-plasmic-name={"textbox3"}
                        data-plasmic-override={overrides.textbox3}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textbox3
                        )}
                        onChange={e => {
                          p.generateStateOnChangeProp($state, [
                            "textbox3",
                            "value"
                          ])(e.target.value);
                        }}
                        placeholder={"Email address"}
                        ref={ref => {
                          $refs["textbox3"] = ref;
                        }}
                        size={1}
                        type={"text"}
                        value={
                          p.generateStateValueProp($state, [
                            "textbox3",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <input
                        data-plasmic-name={"textbox4"}
                        data-plasmic-override={overrides.textbox4}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textbox4
                        )}
                        onChange={e => {
                          p.generateStateOnChangeProp($state, [
                            "textbox4",
                            "value"
                          ])(e.target.value);
                        }}
                        placeholder={"Phone number"}
                        ref={ref => {
                          $refs["textbox4"] = ref;
                        }}
                        size={1}
                        type={"text"}
                        value={
                          p.generateStateValueProp($state, [
                            "textbox4",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <textarea
                        data-plasmic-name={"textarea"}
                        data-plasmic-override={overrides.textarea}
                        className={classNames(
                          projectcss.all,
                          projectcss.textarea,
                          sty.textarea
                        )}
                        onChange={e => {
                          p.generateStateOnChangeProp($state, [
                            "textarea",
                            "value"
                          ])(e.target.value);
                        }}
                        placeholder={"Message"}
                        ref={ref => {
                          $refs["textarea"] = ref;
                        }}
                        value={
                          p.generateStateValueProp($state, [
                            "textarea",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <p.Stack
                        as={"a"}
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                      >
                        {false ? (
                          <Icon5Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__abLg1
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bzMzB
                          )}
                        >
                          {"Send"}
                        </div>
                        {false ? (
                          <Icon5Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fpVrv
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "columns",
    "img",
    "h2",
    "h4",
    "textbox",
    "textbox2",
    "textbox3",
    "textbox4",
    "textarea",
    "link",
    "footer"
  ],

  header: ["header"],
  columns: [
    "columns",
    "img",
    "h2",
    "h4",
    "textbox",
    "textbox2",
    "textbox3",
    "textbox4",
    "textarea",
    "link"
  ],

  img: ["img"],
  h2: ["h2"],
  h4: ["h4"],
  textbox: ["textbox"],
  textbox2: ["textbox2"],
  textbox3: ["textbox3"],
  textbox4: ["textbox4"],
  textarea: ["textarea"],
  link: ["link"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContactUs__ArgProps,
          internalVariantPropNames: PlasmicContactUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContactUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactUs";
  } else {
    func.displayName = `PlasmicContactUs.${nodeName}`;
  }
  return func;
}

export const PlasmicContactUs = Object.assign(
  // Top-level PlasmicContactUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    h4: makeNodeComponent("h4"),
    textbox: makeNodeComponent("textbox"),
    textbox2: makeNodeComponent("textbox2"),
    textbox3: makeNodeComponent("textbox3"),
    textbox4: makeNodeComponent("textbox4"),
    textarea: makeNodeComponent("textarea"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicContactUs
    internalVariantProps: PlasmicContactUs__VariantProps,
    internalArgProps: PlasmicContactUs__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContactUs;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wdjrQSNRX7ys49KwqunuZ4
// Component: 8iu20v4mDI3r
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 7oMbG7rPxeuI/component
import Footer from "../../Footer"; // plasmic-import: t96iChT22ax_/component
import { useScreenVariants as useScreenVariantshbagvQWqcZ69 } from "../website_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: HbagvQWqcZ69/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../website_starter/plasmic_website_starter.module.css"; // plasmic-import: wdjrQSNRX7ys49KwqunuZ4/projectcss
import sty from "./PlasmicCellCSocials.module.css"; // plasmic-import: 8iu20v4mDI3r/css
import cellC300MbWhatsApp3DaysR10Png1O7PQePxbIm5 from "./images/cellC300MbWhatsApp3DaysR10Png.png"; // plasmic-import: 1O7pQePxbIM5/picture
import cellC500MbWhatsApp7Dayspng8LYu0ZaaKWuB from "./images/cellC500MbWhatsApp7Dayspng.png"; // plasmic-import: 8lYu0ZaaKWuB/picture
import cellC600Mb15DayspngNPaFkhRd0RBx from "./images/cellC600Mb15Dayspng.png"; // plasmic-import: nPaFkhRD0rBX/picture
import cellC1Gb30DaysR35PngPk53QXf60Dk from "./images/cellC1Gb30DaysR35Png.png"; // plasmic-import: PK5_3QXf60DK/picture

createPlasmicElementProxy;

export const PlasmicCellCSocials__VariantProps = new Array();

export const PlasmicCellCSocials__ArgProps = new Array();

function PlasmicCellCSocials__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshbagvQWqcZ69()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"shop"}
          data-plasmic-override={overrides.shop}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.shop
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <section className={classNames(projectcss.all, sty.section__fPCz2)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#2E2854" }}
                      >
                        {"Cell C Social Bundles"}
                      </span>
                    </React.Fragment>
                  </h1>
                }

                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__toDx)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__uEe1B)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qu9F)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "500px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: cellC300MbWhatsApp3DaysR10Png1O7PQePxbIm5,
                    fullWidth: 408,
                    fullHeight: 408,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__jnbPh)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__mwKzx)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: cellC500MbWhatsApp7Dayspng8LYu0ZaaKWuB,
                    fullWidth: 408,
                    fullHeight: 408,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__cW4OV)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__lYdDi)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: cellC600Mb15DayspngNPaFkhRd0RBx,
                    fullWidth: 408,
                    fullHeight: 408,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__ij4L8)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__c7Caq)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: cellC1Gb30DaysR35PngPk53QXf60Dk,
                    fullWidth: 408,
                    fullHeight: 408,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  shop: ["shop", "header", "text", "h1", "columns", "footer"],
  header: ["header"],
  text: ["text", "h1"],
  h1: ["h1"],
  columns: ["columns"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCellCSocials__ArgProps,
          internalVariantPropNames: PlasmicCellCSocials__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCellCSocials__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "shop") {
    func.displayName = "PlasmicCellCSocials";
  } else {
    func.displayName = `PlasmicCellCSocials.${nodeName}`;
  }
  return func;
}

export const PlasmicCellCSocials = Object.assign(
  // Top-level PlasmicCellCSocials renders the root element
  makeNodeComponent("shop"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    text: makeNodeComponent("text"),
    h1: makeNodeComponent("h1"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicCellCSocials
    internalVariantProps: PlasmicCellCSocials__VariantProps,
    internalArgProps: PlasmicCellCSocials__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Cell C Socials",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCellCSocials;
/* prettier-ignore-end */
